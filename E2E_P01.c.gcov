        -:    0:Source:E2E_P01.c
        -:    0:Graph:UT_E2E_P01.gcno
        -:    0:Data:UT_E2E_P01.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "Std_Types.h"
        -:    2:#include "E2E_P01.h"
        -:    3:#include "E2E.h"
        -:    4:
        -:    5:#define MAX_P01_DATA_LENGTH_IN_BITS (240)
        -:    6:#define MAX_P01_COUNTER_VALUE (14)
        -:    7:
        -:    8:/**
        -:    9:@brief CheckConfig
        -:   10:
        -:   11:
        -:   12:Kontrola poprawnoœci struktury zawieraj¹cej dane konfiguracyjne.
        -:   13:*/
       18:   14:static inline Std_ReturnType CheckConfig(E2E_P01ConfigType* Config) {
        -:   15:
       18:   16:    if (Config == NULL) {
        3:   17:        return E2E_E_INPUTERR_NULL; 
        -:   18:    }
        -:   19:
       29:   20:    if ((Config->DataLength > MAX_P01_DATA_LENGTH_IN_BITS) || (Config->DataLength % 8 != 0)  ||
       28:   21:        (Config->CounterOffset % 4 != 0) || Config->CRCOffset % 8 != 0) {
        1:   22:        return E2E_E_INPUTERR_WRONG; 
        -:   23:    }
        -:   24:
       27:   25:    if ((Config->CRCOffset + 8 > Config->DataLength) || (Config->CounterOffset + 4 > Config->DataLength) ||
       13:   26:        (Config->CRCOffset/8 == Config->CounterOffset/8)) {
        1:   27:        return E2E_E_INPUTERR_WRONG; 
        -:   28:    }
        -:   29:
       13:   30:    return E_OK;
        -:   31:	
        -:   32:}
        -:   33:
        -:   34:/**
        -:   35:@brief Obliczanie CRC
        -:   36:
        -:   37:
        -:   38:Funkcja realizuj¹ca algorytm obliczaj¹cy kod CRC dla danych wejœciowych.
        -:   39:*/
       14:   40:static uint8 CalculateCrc(E2E_P01ConfigType* Config, uint8 Counter, uint8* Data)
        -:   41:{
       14:   42:    uint8 crc = 0x00;
       14:   43:    uint8 lowerByteId = (uint8)(Config->DataID);
       14:   44:    uint8 upperByteId = (uint8)(Config->DataID>>8);
        -:   45:
        -:   46:    /* Calculate CRC on the Data ID */
       14:   47:    switch (Config->DataIDMode) 
        -:   48:    {
        -:   49:        case E2E_P01_DATAID_BOTH:
        7:   50:            crc = Crc_CalculateCRC8(&lowerByteId, 1, 0xFF, FALSE);
        7:   51:            crc = Crc_CalculateCRC8(&upperByteId, 1, crc, FALSE);
        7:   52:            break;
        -:   53:        case E2E_P01_DATAID_LOW:
        1:   54:            crc = Crc_CalculateCRC8(&lowerByteId, 1, 0xFF, FALSE);
        1:   55:            break;
        -:   56:        case E2E_P01_DATAID_ALT:
        3:   57:            if (Counter % 2 == 0)
        -:   58:            {
        1:   59:                crc = Crc_CalculateCRC8(&lowerByteId, 1, 0xFF, FALSE);
        -:   60:            }
        -:   61:            else
        -:   62:            {
        2:   63:                crc = Crc_CalculateCRC8(&upperByteId, 1, 0xFF, FALSE);
        -:   64:            }
        3:   65:            break;
        -:   66:        case E2E_P01_DATAID_NIBBLE:
        3:   67:            crc = Crc_CalculateCRC8(&lowerByteId, 1, 0xFF, FALSE);
        3:   68:            crc = Crc_CalculateCRC8(&upperByteId, 1, crc, FALSE);
        3:   69:            break;
        -:   70:    }
        -:   71:
        -:   72:    /* Calculate CRC on the data */
       14:   73:    if (Config->CRCOffset >= 8) {
        1:   74:        crc = Crc_CalculateCRC8(Data, (Config->CRCOffset / 8), crc, FALSE);
        -:   75:    }
        -:   76:
       14:   77:    if (Config->CRCOffset / 8 < (Config->DataLength / 8) - 1) {
       26:   78:        crc = Crc_CalculateCRC8(&Data[Config->CRCOffset/8 + 1],
       13:   79:                                (Config->DataLength / 8 - Config->CRCOffset / 8 - 1),
        -:   80:                                crc, FALSE);
        -:   81:    }
        -:   82:
       14:   83:    return crc ^ 0xFF;
        -:   84:
        -:   85:}
        -:   86:
        -:   87:/**
        -:   88:@brief Protect
        -:   89:
        -:   90:
        -:   91:Funkcja realizuj¹ca algorytm Protect biblioteki E2E profilu 1.
        -:   92:*/
        6:   93:Std_ReturnType E2E_P01Protect(E2E_P01ConfigType* Config, E2E_P01SenderStateType* State, uint8* Data) {
        -:   94:
        6:   95:    Std_ReturnType returnValue = CheckConfig(Config);
        -:   96:
        6:   97:    if (E2E_E_OK != returnValue) {
        1:   98:        return returnValue;
        -:   99:    }
        -:  100:
        5:  101:    if ((State == NULL) || (Data == NULL)) {
        1:  102:        return E2E_E_INPUTERR_NULL;
        -:  103:    }
        -:  104:
        4:  105:    if (Config->CounterOffset % 8 == 0) {
        3:  106:        *(Data+(Config->CounterOffset/8)) = (*(Data+(Config->CounterOffset/8)) & 0xF0) | (State->Counter & 0x0F);
        -:  107:    }
        -:  108:    else {
        1:  109:        *(Data+(Config->CounterOffset/8)) = (*(Data+(Config->CounterOffset/8)) & 0x0F) | ((State->Counter<<4) & 0xF0);
        -:  110:    }
        -:  111:
        4:  112:    if(Config->DataIDMode == E2E_P01_DATAID_NIBBLE){
        2:  113:        if(Config->DataIDNibbleOffset % 8 == 0){
        1:  114:            *(Data+(Config->DataIDNibbleOffset/8)) = (*(Data+(Config->DataIDNibbleOffset/8)) & 0xF0) | ((Config->DataID>>8) & 0x0F);
        -:  115:        }
        -:  116:        else{
        1:  117:            *(Data+(Config->DataIDNibbleOffset/8)) = (*(Data+(Config->DataIDNibbleOffset/8)) & 0x0F) | ((Config->DataID>>4) & 0xF0);
        -:  118:        }
        -:  119:    }
        -:  120:   
        4:  121:    *(Data+(Config->CRCOffset/8)) = CalculateCrc(Config, State->Counter, Data);
        -:  122:
        4:  123:    State->Counter = E2E_UpdateCounter(State->Counter);
        -:  124:
        4:  125:    return E2E_E_OK;
        -:  126:}
        -:  127:
        -:  128:/**
        -:  129:@brief Aktualizacja licznika
        -:  130:
        -:  131:
        -:  132:Funkcja aktualizuj¹ca licznik stosowany w funkcji E2E_P01Protect.
        -:  133:*/
        4:  134:uint8 E2E_UpdateCounter(uint8 Counter) {
        4:  135:    return (Counter+1) % 15; // profile 1 value
        -:  136:}
        -:  137:
        -:  138:/**
        -:  139:@brief Kontrola licznika
        -:  140:
        -:  141:
        -:  142:Funkcja obliczaj¹ca ró¿nicê miêdzy ostatni¹ poprawn¹ wartoœci¹ licznika a wartoœci¹ przychodz¹c¹.
        -:  143:*/
        6:  144:static inline uint8 CalculateDeltaCounter(uint8 receivedCounter, uint8 lastValidCounter)
        -:  145:{
        6:  146:    if (receivedCounter >= lastValidCounter) {
        1:  147:        return receivedCounter - lastValidCounter;
        -:  148:    }
        -:  149:    else {
        5:  150:        return MAX_P01_COUNTER_VALUE + 1 + receivedCounter - lastValidCounter;
        -:  151:    }
        -:  152:}
        -:  153:
        -:  154:/**
        -:  155:@brief Check
        -:  156:
        -:  157:
        -:  158:Funkcja realizuj¹ca algorytm Check biblioteki E2E profilu 1.
        -:  159:*/
        8:  160:Std_ReturnType E2E_P01Check(E2E_P01ConfigType* Config, E2E_P01ReceiverStateType* State, uint8* Data) {
        -:  161:
        8:  162:    uint8 receivedCounter = 0;
        8:  163:    uint8 receivedCrc = 0;
        8:  164:    uint8 calculatedCrc = 0;
        8:  165:    uint8 delta = 0;
        8:  166:    Std_ReturnType returnValue = CheckConfig(Config);
        -:  167:
        8:  168:    if (E2E_E_OK != returnValue) {
        1:  169:        return returnValue;
        -:  170:    }
        -:  171:
        7:  172:    if ((State == NULL) || (Data == NULL)) {
        1:  173:        return E2E_E_INPUTERR_NULL;
        -:  174:    }
        -:  175:
        6:  176:    if (State->MaxDeltaCounter < MAX_P01_COUNTER_VALUE) {
        5:  177:        State->MaxDeltaCounter++;
        -:  178:    }
        -:  179:
        6:  180:    if (State->NewDataAvailable == FALSE) {
        1:  181:        State->Status = E2E_P01STATUS_NONEWDATA;
        1:  182:        return E2E_E_OK;  
        -:  183:    }
        -:  184:
        5:  185:    if (Config->CounterOffset % 8 == 0) {
        1:  186:        receivedCounter = *(Data+(Config->CounterOffset/8)) & 0x0F;
        -:  187:    }
        -:  188:    else {
        4:  189:        receivedCounter = (*(Data+(Config->CounterOffset/8)) >> 4) & 0x0F;
        -:  190:    }
        -:  191:
        5:  192:    if (State->WaitForFirstData == TRUE) {
        1:  193:        State->WaitForFirstData = FALSE;
        1:  194:        State->MaxDeltaCounter = Config->MaxDeltaCounterInit;
        1:  195:        State->LastValidCounter = receivedCounter;
        1:  196:        State->Status= E2E_P01STATUS_INITAL;
        1:  197:        return E2E_E_OK;
        -:  198:    }
        -:  199:
        4:  200:    delta = CalculateDeltaCounter(receivedCounter, State->LastValidCounter);
        -:  201:
        4:  202:    if (delta == 1) {
        1:  203:        State->MaxDeltaCounter = Config->MaxDeltaCounterInit;
        1:  204:        State->LastValidCounter = receivedCounter;
        1:  205:        State->LostData = 0;
        1:  206:        State->Status= E2E_P01STATUS_OK;
        -:  207:    }
        3:  208:    else if (delta == 0) {
        1:  209:        State->Status= E2E_P01STATUS_REPEATED;
        -:  210:    }
        2:  211:    else if (delta <= State->MaxDeltaCounter) {
        1:  212:        State->MaxDeltaCounter = Config->MaxDeltaCounterInit;
        1:  213:        State->LastValidCounter = receivedCounter;
        1:  214:        State->LostData = delta - 1;
        1:  215:        State->Status= E2E_P01STATUS_OKSOMELOST;
        -:  216:    }
        -:  217:    else {
        1:  218:        State->Status= E2E_P01STATUS_WRONGSEQUENCE;
        -:  219:    }
        -:  220:
        4:  221:    receivedCrc = *(Data+(Config->CRCOffset/8));
        4:  222:    calculatedCrc = CalculateCrc(Config, receivedCounter, Data);
        -:  223:
        4:  224:    if (receivedCrc != calculatedCrc) {
        4:  225:        State->Status = E2E_P01STATUS_WRONGCRC;
        -:  226:    }
        -:  227:
        4:  228:    return E2E_E_OK;
        -:  229:}
        -:  230:
