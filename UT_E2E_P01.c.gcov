        -:    0:Source:UT_E2E_P01.c
        -:    0:Graph:UT_E2E_P01.gcno
        -:    0:Data:UT_E2E_P01.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:/** ==================================================================================================================*\
        -:    2:  @file UT_E2E_P1.c
        -:    3:
        -:    4:  @brief Testy jednostkowe do E2E_P1
        -:    5:\*====================================================================================================================*/
        -:    6:
        -:    7:#include "Std_Types.h"
        -:    8:
        -:    9:#include "acutest.h"
        -:   10:#include "fff.h"
        -:   11:
        -:   12:#include "E2E_P01.c"
        -:   13:
        -:   14:
        -:   15:DEFINE_FFF_GLOBALS;
        -:   16:
       38:   17:FAKE_VALUE_FUNC4(uint8, Crc_CalculateCRC8,const uint8*, uint32, uint8, boolean);
        -:   18:
        -:   19:
        -:   20:/**
        -:   21:  @brief Test funkcji CalculateCrc
        -:   22:
        -:   23:  Funkcja testująca obliczanie CRC.
        -:   24:*/
        1:   25:void Test_Of_CalculateCrc(void)
        -:   26:{
        -:   27:    E2E_P01ConfigType Config;
        1:   28:    Config = (E2E_P01ConfigType){
        -:   29:        .CounterOffset = 8,
        -:   30:        .CRCOffset = 0,
        -:   31:        .DataID = 0xA4,
        -:   32:        .DataIDMode = E2E_P01_DATAID_BOTH,
        -:   33:        .DataLength = 64,
        -:   34:        .MaxDeltaCounterInit = 1
        -:   35:    };
        1:   36:    uint8 data[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
        1:   37:    uint8 counter = 2;
        1:   38:    uint8 call_count = 0;
        -:   39:    uint8 crc;
        1:   40:    Crc_CalculateCRC8_fake.return_val = 0x5;
        1:   41:    crc = CalculateCrc(&Config, counter, data);
        -:   42:    
        1:   43:    TEST_CHECK((Crc_CalculateCRC8_fake.call_count - call_count) == 3 );
        1:   44:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[0] == 0xFF);
        1:   45:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[1] == 0x5);
        1:   46:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[2] == 0x5);
        1:   47:    TEST_CHECK(crc == (5 ^ 0xFF));
        1:   48:    call_count = Crc_CalculateCRC8_fake.call_count;
        -:   49:
        1:   50:    Config.DataIDMode = E2E_P01_DATAID_LOW;
        1:   51:    crc = CalculateCrc(&Config, counter, data);
        1:   52:    TEST_CHECK((Crc_CalculateCRC8_fake.call_count - call_count) == 2);
        1:   53:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[0] == 0xFF);
        1:   54:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[1] == 0x5);
        1:   55:    TEST_CHECK(crc == (5 ^ 0xFF));
        1:   56:    call_count = Crc_CalculateCRC8_fake.call_count;
        -:   57:
        1:   58:    Config.DataIDMode = E2E_P01_DATAID_ALT;
        1:   59:    crc = CalculateCrc(&Config, counter, data);
        1:   60:    TEST_CHECK((Crc_CalculateCRC8_fake.call_count - call_count) == 2);
        1:   61:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[0] == 0xFF);
        1:   62:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[1] == 0x5);
        1:   63:    TEST_CHECK(crc == (5 ^ 0xFF));
        1:   64:    call_count = Crc_CalculateCRC8_fake.call_count;
        -:   65:
        1:   66:    Config.DataIDMode = E2E_P01_DATAID_NIBBLE;
        1:   67:    crc = CalculateCrc(&Config, counter, data);
        1:   68:    TEST_CHECK((Crc_CalculateCRC8_fake.call_count - call_count) == 3);
        1:   69:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[0] == 0xFF);
        1:   70:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[1] == 0x5);
        1:   71:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[1] == 0x5);
        1:   72:    TEST_CHECK(crc == (5 ^ 0xFF));
        1:   73:    call_count = Crc_CalculateCRC8_fake.call_count;
        -:   74:
        1:   75:    Config.DataIDMode = E2E_P01_DATAID_ALT;
        1:   76:    counter = 3;
        1:   77:    crc = CalculateCrc(&Config, counter, data);
        1:   78:    TEST_CHECK((Crc_CalculateCRC8_fake.call_count - call_count) == 2);
        1:   79:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[0] == 0xFF);
        1:   80:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[1] == 0x5);
        1:   81:    TEST_CHECK(crc == (5 ^ 0xFF));
        1:   82:    call_count = Crc_CalculateCRC8_fake.call_count;
        -:   83:
        1:   84:    Config.DataIDMode = E2E_P01_DATAID_ALT;
        1:   85:    Config.CRCOffset = 100;
        1:   86:    crc = CalculateCrc(&Config, counter, data);
        1:   87:    TEST_CHECK((Crc_CalculateCRC8_fake.call_count - call_count) == 2);
        1:   88:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[0] == 0xFF);
        1:   89:    TEST_CHECK(Crc_CalculateCRC8_fake.arg2_history[1] == 0x5);
        1:   90:    TEST_CHECK(crc == (5 ^ 0xFF));
        1:   91:    call_count = Crc_CalculateCRC8_fake.call_count;
        1:   92:}
        -:   93:
        -:   94:
        -:   95:/**
        -:   96:  @brief Test funkcji E2E_P01Protect
        -:   97:*/
        1:   98:void Test_of_E2E_P01Protect(void){
        -:   99:    Std_ReturnType retv;
        -:  100:    E2E_P01ConfigType Config;
        -:  101:    E2E_P01SenderStateType State;
        -:  102:    uint8 Data;
        1:  103:    Config = (E2E_P01ConfigType){
        -:  104:        .CounterOffset = 8,
        -:  105:        .CRCOffset = 0,
        -:  106:        .DataID = 0xA4,
        -:  107:        .DataIDNibbleOffset = 12,
        -:  108:        .DataIDMode = E2E_P01_DATAID_BOTH,
        -:  109:        .DataLength = 64,
        -:  110:        .MaxDeltaCounterInit = 1
        -:  111:    };
        1:  112:    State = (E2E_P01SenderStateType){
        -:  113:        .Counter = 0
        -:  114:    };
        1:  115:    Data = 0;
        -:  116:
        1:  117:    retv = E2E_P01Protect(&Config, &State, &Data);
        1:  118:    TEST_CHECK(retv == E2E_E_OK);
        -:  119:
        1:  120:    retv = E2E_P01Protect(&Config, &State, NULL);
        1:  121:    TEST_CHECK(retv == E2E_E_INPUTERR_NULL);
        -:  122:
        1:  123:    retv = E2E_P01Protect(NULL, &State, &Data);
        1:  124:    TEST_CHECK(retv == E2E_E_INPUTERR_NULL);
        -:  125:
        1:  126:    Config.CounterOffset = 12;
        1:  127:    retv = E2E_P01Protect(&Config, &State, &Data);
        1:  128:    TEST_CHECK(retv == E2E_E_OK);
        -:  129:
        1:  130:    Config.CounterOffset = 8;
        1:  131:    Config.DataIDMode = E2E_P01_DATAID_NIBBLE;
        1:  132:    retv = E2E_P01Protect(&Config, &State, &Data);
        1:  133:    TEST_CHECK(retv == E2E_E_OK);
        -:  134:
        1:  135:    Config.DataIDNibbleOffset = 16;
        1:  136:    retv = E2E_P01Protect(&Config, &State, &Data);
        1:  137:    TEST_CHECK(retv == E2E_E_OK);
        1:  138:}
        -:  139:
        -:  140:
        -:  141:/**
        -:  142:  @brief Test funkcji CheckConfig
        -:  143:
        -:  144:  Funkcja testująca poprawność struktury zawierającej dane konfiguracyjne.
        -:  145:*/
        1:  146:void Test_of_CheckConfig(void){
        -:  147:    Std_ReturnType retv;
        -:  148:    E2E_P01ConfigType Config;
        1:  149:    Config = (E2E_P01ConfigType){
        -:  150:        .CounterOffset = 8,
        -:  151:        .CRCOffset = 0,
        -:  152:        .DataID = 0xA4,
        -:  153:        .DataIDNibbleOffset = 12,
        -:  154:        .DataIDMode = E2E_P01_DATAID_BOTH,
        -:  155:        .DataLength = 64,
        -:  156:        .MaxDeltaCounterInit = 1
        -:  157:    };
        1:  158:    retv = CheckConfig(&Config);
        1:  159:    TEST_CHECK(retv == E2E_E_OK);
        -:  160:
        1:  161:    retv = CheckConfig(NULL);
        1:  162:    TEST_CHECK(retv == E2E_E_INPUTERR_NULL);
        -:  163:
        1:  164:    Config.DataLength = 65;
        1:  165:    retv = CheckConfig(&Config);
        1:  166:    TEST_CHECK(retv == E2E_E_INPUTERR_WRONG);
        -:  167:
        1:  168:    Config.DataLength = 64;
        1:  169:    Config.CRCOffset = 64;
        1:  170:    retv = CheckConfig(&Config);
        1:  171:    TEST_CHECK(retv == E2E_E_INPUTERR_WRONG);
        1:  172:}
        -:  173:
        -:  174:
        -:  175:/**
        -:  176:  @brief Test funkcji CalculateDeltaCounter
        -:  177:
        -:  178:  Funkcja testująca poprawność ustawień licznika.
        -:  179:*/
        1:  180:void Test_of_CalculateDeltaCounter(void){
        1:  181:    uint8 receivedCounter  = 0x5;
        1:  182:    uint8 lastValidCounter = 0x4;
        -:  183:    uint8 retv;
        -:  184:
        1:  185:    retv = CalculateDeltaCounter(receivedCounter, lastValidCounter);
        1:  186:    TEST_CHECK(retv == receivedCounter - lastValidCounter);
        -:  187:
        1:  188:    receivedCounter  = 0x4;
        1:  189:    lastValidCounter = 0x5;
        -:  190:
        1:  191:    retv = CalculateDeltaCounter(receivedCounter, lastValidCounter);
        1:  192:    TEST_CHECK(retv == MAX_P01_COUNTER_VALUE + 1 + receivedCounter - lastValidCounter);
        -:  193:    
        1:  194:}
        -:  195:
        -:  196:
        -:  197:/**
        -:  198:  @brief Test funkcji E2E_P01Check
        -:  199:
        -:  200:  Funkcja testująca kontrolę poprawności danych.
        -:  201:*/
        1:  202:void Test_of_E2E_P01Check(void){
        -:  203:    Std_ReturnType retv;
        -:  204:    E2E_P01ConfigType Config;
        -:  205:    E2E_P01ReceiverStateType State;
        -:  206:    uint8 Data;
        1:  207:    Config = (E2E_P01ConfigType){
        -:  208:        .CounterOffset = 8,
        -:  209:        .CRCOffset = 0,
        -:  210:        .DataID = 0xA4,
        -:  211:        .DataIDNibbleOffset = 12,
        -:  212:        .DataIDMode = E2E_P01_DATAID_BOTH,
        -:  213:        .DataLength = 64,
        -:  214:        .MaxDeltaCounterInit = 1
        -:  215:    };
        1:  216:    State = (E2E_P01ReceiverStateType){
        -:  217:        .LastValidCounter = 0x5,
        -:  218:        .MaxDeltaCounter  = 0xE,
        -:  219:        .WaitForFirstData = 0x1,
        -:  220:        .NewDataAvailable = 0x1,
        -:  221:        .LostData         = 0x0,
        -:  222:        .Status           = E2E_P01STATUS_OK
        -:  223:    };
        1:  224:    Data = 0;
        -:  225:
        1:  226:    retv = E2E_P01Check(&Config, &State, &Data);
        1:  227:    TEST_CHECK(retv == E2E_E_OK);
        -:  228:
        1:  229:    retv = E2E_P01Check(&Config, &State, NULL);
        1:  230:    TEST_CHECK(retv == E2E_E_INPUTERR_NULL);
        -:  231:
        1:  232:    retv = E2E_P01Check(NULL, &State, &Data);
        1:  233:    TEST_CHECK(retv == E2E_E_INPUTERR_NULL);
        -:  234:
        1:  235:    State.NewDataAvailable = 0x0;
        1:  236:    State.MaxDeltaCounter = 0xA;
        1:  237:    retv = E2E_P01Check(&Config, &State, &Data);
        1:  238:    TEST_CHECK(retv == E2E_E_OK);
        -:  239:
        1:  240:    State.NewDataAvailable = 0x1;
        1:  241:    Config.CounterOffset = 12;
        1:  242:    State.WaitForFirstData = 0x0;
        1:  243:    retv = E2E_P01Check(&Config, &State, &Data);
        1:  244:    TEST_CHECK(retv == E2E_E_OK);
        -:  245:
        1:  246:    State.LastValidCounter = 0xF;
        1:  247:    retv = E2E_P01Check(&Config, &State, &Data);
        1:  248:    TEST_CHECK(retv == E2E_E_OK);
        -:  249:
        1:  250:    State.LastValidCounter = 0xE;
        1:  251:    retv = E2E_P01Check(&Config, &State, &Data);
        1:  252:    TEST_CHECK(retv == E2E_E_OK);
        -:  253:
        1:  254:    State.LastValidCounter = 0x1;
        1:  255:    retv = E2E_P01Check(&Config, &State, &Data);
        1:  256:    TEST_CHECK(retv == E2E_E_OK);
        -:  257:
        1:  258:}
        -:  259:
        -:  260:/**
        -:  261:  @brief Lista testów
        -:  262:*/
        -:  263:TEST_LIST = {
        -:  264:    { "Test of CalculateCrc", Test_Of_CalculateCrc },
        -:  265:    { "Test of E2E_P01Protect", Test_of_E2E_P01Protect },
        -:  266:    { "Test of CheckConfig", Test_of_CheckConfig },
        -:  267:    { "Test of CalculateDeltaCounter", Test_of_CalculateDeltaCounter },
        -:  268:    { "Test of E2E_P01Check", Test_of_E2E_P01Check },/* Format to { "nazwa testu", nazwa_funkcji } */
        -:  269:    { NULL, NULL }                                      /* To musi być na końcu */
        -:  270:};
        -:  271:
